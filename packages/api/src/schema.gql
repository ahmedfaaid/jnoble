# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Province {
  id: Int!
  name: String!
  abbr: String!
  createdAt: String!
  updatedAt: String!
}

type SubUser {
  id: Int!
  firstName: String!
  lastName: String!
  middleName: String
  jobTitle: String!
  phone: String!
  email: String!
  employer: Employer!
  role: Role!
  createdAt: String!
  updatedAt: String!
}

enum Role {
  ADMIN
  MAN
  CANDIDATE
}

type Employer {
  id: Int!
  name: String!
  email: String!
  phone: String!
  industry: String!
  address: Address!
  employees: [Candidate!]
  sub: [SubUser!]!
  createdAt: String!
  updatedAt: String!
}

type Candidate {
  id: Int!
  firstName: String!
  lastName: String!
  middleName: String
  preferredName: String
  dateOfBirth: String!
  jobTitle: String!
  phone: String!
  email: String!
  address: Address!
  employer: Employer
  languages: [String!]!
  skills: [String!]!
  validDriversLicense: Boolean!
  ownVehicle: Boolean!
  statusInCanada: String!
  available: Boolean!
  role: Role!
  createdAt: String!
  updatedAt: String!
}

type AllCandidatesResponse {
  items: [Candidate!]!
  count: Int!
}

type Address {
  id: Int!
  candidate: Candidate!
  address1: String!
  address2: String
  city: String!
  province: Province!
  postalCode: String!
  country: String!
  createdAt: String!
  updatedAt: String!
}

type AuthorizedCandidate {
  candidate: Candidate!
  token: String!
}

type AuthorizedSubUser {
  subUser: SubUser!
  token: String!
}

type Query {
  allEmployers: [Employer!]
  employerByName(input: String!): [Employer!]
  employerByEmail(input: String!): [Employer!]
  employerById(id: Int!): [Employer!]
  allCandidates(skip: Int, take: Int!): AllCandidatesResponse
  candidatesByName(input: String!): [Candidate!]
  candidateByEmail(input: String!): Candidate
  candidateById(id: Int!): Candidate
  allSubUsers: [SubUser!]
  subUserByName(input: String!): [SubUser!]
  subUserByEmail(input: String!): [SubUser!]
  subUserById(id: Int!): [SubUser!]
  verifyCandidate(token: String!): Candidate!
  verifySubUser(token: String!): SubUser!
  logout: Boolean!
}

type Mutation {
  addEmployer(province: ProvinceInput!, address: AddressInput!, employer: EmployerInput!, sub: SubUserInput!): Employer!
  updateEmployer(province: ProvinceInput, input: EmployerUpdateInput!, id: Int!): Employer!
  addCandidate(province: ProvinceInput!, address: AddressInput!, candidate: CandidateInput!): Candidate!
  updateCandidate(province: ProvinceInput, input: CandidateUpdateInput, id: Float!): Candidate!
  bulkAdd: [Candidate!]!
  addSubuser(subUser: SubUserInput!): SubUser!
  updateSubUser(input: SubUserUpdateInput!, id: Int!): SubUser!
  candidateLogin(password: String!, email: String!): AuthorizedCandidate!
  registerCandidate(province: ProvinceInput!, address: AddressInput!, candidateInput: CandidateInput!): AuthorizedCandidate!
  createCandidatePassword(password: String!, email: String!): Candidate!
  subUserLogin(password: String!, email: String!): AuthorizedSubUser!
  createSubUserPassword(password: String!, email: String!): SubUser!
}

input ProvinceInput {
  name: String!
}

input AddressInput {
  address1: String!
  address2: String
  city: String!
  postalCode: String!
  country: String!
}

input EmployerInput {
  name: String!
  email: String!
  phone: String!
  industry: String!
}

input SubUserInput {
  firstName: String!
  lastName: String!
  middleName: String
  jobTitle: String!
  phone: String!
  email: String!
  password: String
  role: String
}

input EmployerUpdateInput {
  name: String
  email: String
  phone: String
  industry: String
  address: AddressInput
}

input CandidateInput {
  firstName: String!
  lastName: String!
  middleName: String
  preferredName: String
  dateOfBirth: String!
  jobTitle: String!
  phone: String!
  email: String!
  password: String
  employerId: Int
  languages: [String!]!
  skills: [String!]!
  validDriversLicense: Boolean
  ownVehicle: Boolean
  statusInCanada: String!
  available: Boolean!
}

input CandidateUpdateInput {
  firstName: String
  lastName: String
  middleName: String
  preferredName: String
  dateOfBirth: String
  jobTitle: String
  phone: String
  email: String
  password: String
  address: AddressInput
  languages: [String!]
  skills: [String!]
  validDriversLicense: Boolean
  ownVehicle: Boolean
  statusInCanada: String
  available: Boolean
}

input SubUserUpdateInput {
  firstName: String
  lastName: String
  middleName: String
  jobTitle: String
  phone: String
  email: String
  password: String
}
